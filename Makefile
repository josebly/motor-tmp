##########################################################################################################################
# File automatically-generated by tool: [projectgenerator] version: [3.0.0] date: [Thu Feb 07 12:13:36 PST 2019] 
##########################################################################################################################

# ------------------------------------------------
# Generic Makefile (based on gcc)
#
# ChangeLog :
#	2017-02-10 - Several enhancements + project update mode
#   2015-07-22 - first version
# ------------------------------------------------
GIT_VERSION := $(shell git describe --dirty --always --tags)
$(shell touch version.h)

######################################
# target
######################################
TARGET = motor-tmp


######################################
# building variables
######################################
# debug build?
DEBUG = 1
LTO=0
ifeq ($(LTO), 1)
LTOI = -flto
$(info "Building with lto!!!!")
else
LTOI = 
endif

# optimization
OPT = -Og -O3

DEFAULT_PARAM_C = param_dev_00_robo.c
CONFIG_FILES = Src/config/dev_00.cpp dev_00_spi.cpp

#######################################
# paths
#######################################
# Build path
BUILD_DIR = build

######################################
# source
######################################
# C sources
C_SOURCES =  \
Src/usb_device.c \
Src/usbd_conf.c \
Src/usbd_desc.c \
Src/usbd_cdc_if.c \
Src/stm32f4xx_it.c \
Src/stm32f4xx_hal_msp.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pcd.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pcd_ex.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_ll_usb.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc_ex.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_tim.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_tim_ex.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc_ex.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ramfunc.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_gpio.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_dma_ex.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_dma.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr_ex.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_cortex.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c \
Src/system_stm32f4xx.c \
Middlewares/ST/STM32_USB_Device_Library/Core/Src/usbd_core.c \
Middlewares/ST/STM32_USB_Device_Library/Core/Src/usbd_ctlreq.c \
Middlewares/ST/STM32_USB_Device_Library/Core/Src/usbd_ioreq.c \
Middlewares/ST/STM32_USB_Device_Library/Class/CDC/Src/usbd_cdc.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_dac.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_dac_ex.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_spi.c \
Src/param.c \
Src/util.c \
parameters/${DEFAULT_PARAM_C}

# config must be initialized before others
CPP_SOURCES = Src/config.cpp \
control/control_fun.cpp \
foc.cpp \
foc_i.cpp \
sincos.cpp \
fast_loop.cpp \
pwm.cpp \
main_loop.cpp \
Src/pin_config.cpp \
Src/main.cpp \
parameters/otp.cpp \
communication/usb_communication.cpp \
control/spi_encoder.cpp \
control/gpio.cpp \


# ASM sources
ASM_SOURCES =  \
startup_stm32f446xx.s


#######################################
# binaries
#######################################
PREFIX = arm-none-eabi-
# The gcc compiler bin path can be either defined in make command via GCC_PATH variable (> make GCC_PATH=xxx)
# either it can be added to the PATH environment variable.
ifdef GCC_PATH
CC = $(GCC_PATH)/$(PREFIX)gcc
AS = $(GCC_PATH)/$(PREFIX)gcc -x assembler-with-cpp
CP = $(GCC_PATH)/$(PREFIX)objcopy
SZ = $(GCC_PATH)/$(PREFIX)size
CXX = $(GCC_PATH)/$(PREFIX)g++
else
CC = $(PREFIX)gcc
AS = $(PREFIX)gcc -x assembler-with-cpp
CP = $(PREFIX)objcopy
SZ = $(PREFIX)size
CXX = $(PREFIX)g++
endif
HEX = $(CP) -O ihex
BIN = $(CP) -O binary -S
 
#######################################
# CFLAGS
#######################################
# cpu
CPU = -mcpu=cortex-m4

# fpu
FPU = -mfpu=fpv4-sp-d16

# float-abi
FLOAT-ABI = -mfloat-abi=hard

# mcu
MCU = $(CPU) -mthumb $(FPU) $(FLOAT-ABI)

# macros for gcc
# AS defines
AS_DEFS = 

# C defines
C_DEFS =  \
-DUSE_HAL_DRIVER \
-DSTM32F446xx \
-DGIT_VERSION=\"$(GIT_VERSION)\"


# AS includes
AS_INCLUDES = 

# C includes
C_INCLUDES =  \
-IInc \
-IDrivers/STM32F4xx_HAL_Driver/Inc \
-IDrivers/STM32F4xx_HAL_Driver/Inc/Legacy \
-IMiddlewares/ST/STM32_USB_Device_Library/Core/Inc \
-IMiddlewares/ST/STM32_USB_Device_Library/Class/CDC/Inc \
-IDrivers/CMSIS/Device/ST/STM32F4xx/Include \
-IDrivers/CMSIS/Include



# compile gcc flags
ASFLAGS = $(MCU) $(AS_DEFS) $(AS_INCLUDES) $(OPT) -Wall -fdata-sections -ffunction-sections $(LTOI)

CFLAGS = $(MCU) $(C_DEFS) $(C_INCLUDES) $(OPT) -Wall -fdata-sections -ffunction-sections $(LTOI)

ifeq ($(DEBUG), 1)
CFLAGS += -g -gdwarf-2
endif


# Generate dependency information
CFLAGS += -MMD -MP -MF"$(@:%.o=%.d)"


#######################################
# LDFLAGS
#######################################
# link script
LDSCRIPT = STM32F446ZETx_FLASH.ld

# libraries
LIBS = -lc -lm -lnosys 
LIBDIR = 
LDFLAGS = $(MCU) -specs=nosys.specs -T$(LDSCRIPT) $(LIBDIR) $(LIBS) -Wl,-Map=$(BUILD_DIR)/$(TARGET).map,--cref -Wl,--gc-sections $(LTOI)

# default action: build all
all: $(BUILD_DIR)/$(TARGET).elf $(BUILD_DIR)/$(TARGET).hex $(BUILD_DIR)/$(TARGET).bin $(BUILD_DIR)/$(TARGET)_param.bin


#######################################
# build the application
#######################################
# list of objects
OBJECTS = $(addprefix $(BUILD_DIR)/,$(notdir $(CPP_SOURCES:.cpp=.o)))
vpath %.cpp $(sort $(dir $(CPP_SOURCES)))
OBJECTS += $(addprefix $(BUILD_DIR)/,$(notdir $(C_SOURCES:.c=.o)))
vpath %.c $(sort $(dir $(C_SOURCES)))
# list of ASM program objects
OBJECTS += $(addprefix $(BUILD_DIR)/,$(notdir $(ASM_SOURCES:.s=.o)))
vpath %.s $(sort $(dir $(ASM_SOURCES)))


$(BUILD_DIR)/%.o: %.c Makefile | $(BUILD_DIR) 
	$(CC) -c $(CFLAGS) -Wa,-a,-ad,-alms=$(BUILD_DIR)/$(notdir $(<:.c=.lst)) $< -o $@

$(BUILD_DIR)/%.o: %.cpp Makefile | $(BUILD_DIR) 
	$(CXX) -c $(CFLAGS) -Wa,-a,-ad,-alms=$(BUILD_DIR)/$(notdir $(<:.cpp=.lst)) $< -o $@

$(BUILD_DIR)/%.o: %.s Makefile | $(BUILD_DIR)
	$(AS) -c $(CFLAGS) $< -o $@

$(BUILD_DIR)/$(TARGET).elf: $(OBJECTS) Makefile
	$(CXX) $(OBJECTS) $(LDFLAGS) -o $@
	$(SZ) $@

$(BUILD_DIR)/%.hex: $(BUILD_DIR)/%.elf | $(BUILD_DIR)
	$(HEX) $< $@
	
$(BUILD_DIR)/%.bin: $(BUILD_DIR)/%.elf | $(BUILD_DIR)
	$(BIN) -R flash_param $< $@	

$(BUILD_DIR)/%_param.bin: $(BUILD_DIR)/%.elf | $(BUILD_DIR)
	$(BIN) -j flash_param $< $@	
	
$(BUILD_DIR):
	mkdir $@		

#######################################
# clean up
#######################################
clean:
	-rm -fR $(BUILD_DIR)
  
#######################################
# dependencies
#######################################
-include $(wildcard $(BUILD_DIR)/*.d)

PARAM_GEN_SRCS = Src/param.c parameters/${DEFAULT_PARAM_C} Src/param_gen.cpp
param_gen: $(PARAM_GEN_SRCS) | $(BUILD_DIR)
	gcc $(PARAM_GEN_SRCS) -lstdc++ -std=c++11 -o $(BUILD_DIR)/param_gen

OTP_GEN_SRCS = parameters/otp_gen.cpp parameters/otp.cpp
otp_gen: $(BUILD_DIR)
	g++ $(OTP_GEN_SRCS) -std=c++11 -o $(BUILD_DIR)/otp_gen

FOLDER = release_$(shell git describe --tags)
package: all param_gen otp_gen
	mkdir -p $(FOLDER)
	cp $(BUILD_DIR)/param_gen $(FOLDER)
	cp Src/load_param.sh $(FOLDER)
	cp load_program.sh $(FOLDER)
	cp $(BUILD_DIR)/$(TARGET).bin $(FOLDER)
	cp $(BUILD_DIR)/$(TARGET)_param.bin $(FOLDER)
	cp $(BUILD_DIR)/otp_gen $(FOLDER)
	cp parameters/load_otp.sh $(FOLDER)
	cp -r ini/ $(FOLDER)
	cp 99-st.rules $(FOLDER)
	cp LICENSE $(FOLDER)
	cp -r docs/ $(FOLDER)
	tar czf $(FOLDER).tgz $(FOLDER)/

DEB_FOLDER = $(TARGET)-$(GIT_VERSION)
INSTALL_PREFIX = usr
INSTALL_BIN_DIR = $(INSTALL_PREFIX)/bin
INSTALL_SHARE_DIR = $(INSTALL_PREFIX)/share/$(TARGET)
INSTALL_UDEV_RULES_DIR = etc/udev/rules.d
deb_package: package
	mkdir -p $(DEB_FOLDER)/$(INSTALL_BIN_DIR)
	mkdir -p $(DEB_FOLDER)/$(INSTALL_SHARE_DIR)
	mkdir -p $(DEB_FOLDER)/$(INSTALL_UDEV_RULES_DIR)
	cp -r DEBIAN $(DEB_FOLDER)/
	cp Src/load_param.sh $(DEB_FOLDER)/$(INSTALL_BIN_DIR)/motor_load_param
	cp load_program.sh $(DEB_FOLDER)/$(INSTALL_BIN_DIR)/motor_load_program
	cp $(BUILD_DIR)/otp_gen $(DEB_FOLDER)/$(INSTALL_BIN_DIR)/motor_otp_gen
	cp $(BUILD_DIR)/param_gen $(DEB_FOLDER)/$(INSTALL_BIN_DIR)/motor_param_gen
	cp parameters/load_otp.sh $(DEB_FOLDER)/$(INSTALL_BIN_DIR)/motor_load_otp
	cp $(BUILD_DIR)/$(TARGET).bin $(DEB_FOLDER)/$(INSTALL_SHARE_DIR)
	cp $(BUILD_DIR)/$(TARGET)_param.bin $(DEB_FOLDER)/$(INSTALL_SHARE_DIR)
	cp 99-st.rules $(DEB_FOLDER)/$(INSTALL_UDEV_RULES_DIR)
	cp -r ini/ $(DEB_FOLDER)/$(INSTALL_SHARE_DIR)/
	cp -r docs/ $(DEB_FOLDER)/$(INSTALL_SHARE_DIR)/
	cp LICENSE $(DEB_FOLDER)/$(INSTALL_SHARE_DIR)/

	echo $(GIT_VERSION) | sed 's/^v/Version: /' >> $(DEB_FOLDER)/DEBIAN/control
	dpkg-deb --build $(DEB_FOLDER)

test: all
	$(MAKE) -C test
